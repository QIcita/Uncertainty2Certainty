import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.jit import Final
from timm.layers import use_fused_attn


class UARAttention(nn.Module):
    fused_attn: Final[bool]
    LOAD_BALANCING_LOSSES = []

    def __init__(
        self,
        dim,
        num_heads=8,
        qkv_bias=False,
        qk_norm=False,
        attn_drop=0.0,
        proj_drop=0.0,
        norm_layer=nn.LayerNorm,
        shared_head=0,
        routed_head=0,
        head_dim=None,
    ):
        super().__init__()
        self.num_heads = num_heads
        if head_dim is None:
            self.head_dim = dim // num_heads
        else:
            self.head_dim = head_dim
        self.scale = self.head_dim**-0.5
        self.fused_attn = use_fused_attn()

        # QKV projection
        self.qkv = nn.Linear(dim, (self.head_dim * self.num_heads) * 3, bias=qkv_bias)

        # Optional normalization for Q and K
        self.q_norm = norm_layer(self.head_dim) if qk_norm else nn.Identity()
        self.k_norm = norm_layer(self.head_dim) if qk_norm else nn.Identity()

        # Dropout layers
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(self.head_dim * self.num_heads, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        # Routing and shared head weights
        self.shared_head = shared_head
        self.routed_head = routed_head

        if self.routed_head > 0:
            self.wg = nn.Linear(dim, num_heads - shared_head, bias=False)
            if self.shared_head > 0:
                self.wg_0 = nn.Linear(dim, 2, bias=False)

        if self.shared_head > 1:
            self.wg_1 = nn.Linear(dim, shared_head, bias=False)

        # Uncertainty modeling branch

        self.uncertainty_branch = nn.Sequential(
            nn.Linear(dim, dim // 2),
            nn.ReLU(),
            nn.Dropout(p=0.1),  # Monte Carlo Dropout
            nn.Linear(dim // 2, dim // 2),
            nn.Softmax(dim=1),
            nn.Dropout(p=0.1),  # Monte Carlo Dropout
            nn.Linear(dim // 2, 1),  # Output uncertainty score
            nn.Sigmoid(),
        )

    def forward(self, x):
        B, N, C = x.shape

        # Flatten input for uncertainty modeling
        _x = x.reshape(B * N, C)

        # Step 1: Compute uncertainty scores
        uncertainty_scores = self.uncertainty_branch(_x).reshape(B, N, 1)  # [B, N, 1]

        # Step 2: Routing head weights with uncertainty adjustment
        if self.routed_head > 0:
            logits = self.wg(_x)  # [B * N, num_heads - shared_head]
            logits = logits * (1 - uncertainty_scores.reshape(B * N, 1)) #* 1.01 # Adjust by uncertainty
            gates = F.softmax(logits, dim=1)

            num_tokens, num_experts = gates.shape
            _, indices = torch.topk(gates, k=self.routed_head, dim=1)
            mask = F.one_hot(indices, num_classes=num_experts).sum(dim=1)

            if self.training:
                me = gates.mean(dim=0)
                ce = mask.float().mean(dim=0)
                l_aux = torch.mean(me * ce) * num_experts * num_experts
                BMoHAttention.LOAD_BALANCING_LOSSES.append(l_aux)

            routed_head_gates = gates * mask
            denom_s = torch.sum(routed_head_gates, dim=1, keepdim=True)
            denom_s = torch.clamp(denom_s, min=torch.finfo(denom_s.dtype).eps)
            routed_head_gates /= denom_s
            routed_head_gates = routed_head_gates.reshape(B, N, -1) * self.routed_head

        # Step 3: QKV projection and attention computation
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, self.head_dim).permute(2, 0, 3, 1, 4)
        q, k, v = qkv.unbind(0)  # Separate Q, K, V
        q, k = self.q_norm(q), self.k_norm(k)

        # Adjust attention scores using uncertainty
        if self.fused_attn:
            x = F.scaled_dot_product_attention(
                q * (1 - uncertainty_scores.unsqueeze(1)),  # Scale Q by uncertainty
                k,
                v,
                dropout_p=self.attn_drop.p if self.training else 0.0,
            )
        else:
            q = q * self.scale * (1 - uncertainty_scores.unsqueeze(1))
            attn = q @ k.transpose(-2, -1)
            attn = attn.softmax(dim=-1)
            attn = self.attn_drop(attn)
            x = attn @ v

        # Step 4: Weighted combination of shared and routed heads
        if self.routed_head > 0:
            x = x.transpose(1, 2)

            if self.shared_head > 0:
                shared_head_weight = self.wg_1(_x)
                shared_head_gates = F.softmax(shared_head_weight, dim=1).reshape(B, N, -1) * self.shared_head

                weight_0 = self.wg_0(_x)
                weight_0 = F.softmax(weight_0, dim=1).reshape(B, N, 2) * 2

                shared_head_gates = torch.einsum("bn,bne->bne", weight_0[:, :, 0], shared_head_gates)
                routed_head_gates = torch.einsum("bn,bne->bne", weight_0[:, :, 1], routed_head_gates)

                masked_gates = torch.cat([shared_head_gates, routed_head_gates], dim=2)
            else:
                masked_gates = routed_head_gates

            x = torch.einsum("bne,bned->bned", masked_gates, x)
            x = x.reshape(B, N, self.head_dim * self.num_heads)
        else:
            shared_head_weight = self.wg_1(_x)
            masked_gates = F.softmax(shared_head_weight, dim=1).reshape(B, N, -1) * self.shared_head
            x = x.transpose(1, 2)

            x = torch.einsum("bne,bned->bned", masked_gates, x)
            x = x.reshape(B, N, self.head_dim * self.num_heads)

        # Step 5: Projection back to input dimension
        x = self.proj(x)
        x = self.proj_drop(x)

        return x  # [B, N, C]
    
